// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validation.proto

package validationpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PathKind is a ProtoBuf representation of the PathKind type, enumerating the different possible
// path kinds (i.e. denoting what the constraint violation is referring to at the given path).
type PathKind int32

const (
	PathKind_VALUE PathKind = 0
	PathKind_KEY   PathKind = 1
)

var PathKind_name = map[int32]string{
	0: "VALUE",
	1: "KEY",
}

var PathKind_value = map[string]int32{
	"VALUE": 0,
	"KEY":   1,
}

func (x PathKind) String() string {
	return proto.EnumName(PathKind_name, int32(x))
}

func (PathKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bfc2ab0b60b7792f, []int{0}
}

// ConstraintViolation is a ProtoBuf representation of the the ConstraintViolation type, intended to
// allow ConstraintViolations to be used with gRPC more easily.
type ConstraintViolation struct {
	Path                 string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	PathKind             PathKind      `protobuf:"varint,2,opt,name=path_kind,json=pathKind,proto3,enum=seeruk.validation.PathKind" json:"path_kind,omitempty"`
	Message              string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Details              *types.Struct `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ConstraintViolation) Reset()         { *m = ConstraintViolation{} }
func (m *ConstraintViolation) String() string { return proto.CompactTextString(m) }
func (*ConstraintViolation) ProtoMessage()    {}
func (*ConstraintViolation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc2ab0b60b7792f, []int{0}
}
func (m *ConstraintViolation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintViolation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstraintViolation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstraintViolation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintViolation.Merge(m, src)
}
func (m *ConstraintViolation) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintViolation) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintViolation.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintViolation proto.InternalMessageInfo

func (m *ConstraintViolation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ConstraintViolation) GetPathKind() PathKind {
	if m != nil {
		return m.PathKind
	}
	return PathKind_VALUE
}

func (m *ConstraintViolation) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ConstraintViolation) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("seeruk.validation.PathKind", PathKind_name, PathKind_value)
	proto.RegisterType((*ConstraintViolation)(nil), "seeruk.validation.ConstraintViolation")
}

func init() { proto.RegisterFile("validation.proto", fileDescriptor_bfc2ab0b60b7792f) }

var fileDescriptor_bfc2ab0b60b7792f = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x17, 0x37, 0xdd, 0x16, 0x41, 0x66, 0x3c, 0x58, 0xa6, 0x84, 0xe2, 0xa9, 0x08, 0x4b,
	0x71, 0x5e, 0x14, 0x4f, 0x2a, 0x3b, 0x4d, 0x50, 0x2a, 0x0e, 0xf4, 0x22, 0xe9, 0x1a, 0xd3, 0xb0,
	0xae, 0x5f, 0x69, 0x52, 0x9f, 0xc5, 0xc7, 0xf0, 0x11, 0x3c, 0x7a, 0xf4, 0x11, 0xa4, 0x7b, 0x11,
	0x31, 0xb5, 0x74, 0xe0, 0x29, 0xff, 0x1f, 0xdf, 0x9f, 0xef, 0xfb, 0x11, 0x3c, 0x78, 0xe5, 0x89,
	0x8a, 0xb8, 0x51, 0x90, 0xb2, 0x2c, 0x07, 0x03, 0x64, 0x57, 0x0b, 0x91, 0x17, 0x0b, 0xd6, 0x0c,
	0x86, 0x23, 0xa9, 0x4c, 0x5c, 0x84, 0x6c, 0x0e, 0x4b, 0x5f, 0x82, 0x04, 0xdf, 0x36, 0xc3, 0xe2,
	0xc5, 0x92, 0x05, 0x9b, 0xaa, 0x0d, 0xc3, 0x43, 0x09, 0x20, 0x13, 0xd1, 0xb4, 0xb4, 0xc9, 0x8b,
	0xb9, 0xa9, 0xa6, 0x47, 0xef, 0x08, 0xef, 0x5d, 0x43, 0xaa, 0x4d, 0xce, 0x55, 0x6a, 0x66, 0x0a,
	0x12, 0x7b, 0x84, 0x10, 0xdc, 0xc9, 0xb8, 0x89, 0x1d, 0xe4, 0x22, 0xaf, 0x1f, 0xd8, 0x4c, 0xce,
	0x70, 0xff, 0xf7, 0x7d, 0x5e, 0xa8, 0x34, 0x72, 0x36, 0x5c, 0xe4, 0xed, 0x8c, 0x0f, 0xd8, 0x3f,
	0x3f, 0x76, 0xc7, 0x4d, 0x3c, 0x55, 0x69, 0x14, 0xf4, 0xb2, 0xbf, 0x44, 0x1c, 0xdc, 0x5d, 0x0a,
	0xad, 0xb9, 0x14, 0x4e, 0xdb, 0x2e, 0xac, 0x91, 0x9c, 0xe0, 0x6e, 0x24, 0x0c, 0x57, 0x89, 0x76,
	0x3a, 0x2e, 0xf2, 0xb6, 0xc7, 0xfb, 0xac, 0xf2, 0x65, 0xb5, 0x2f, 0xbb, 0xb7, 0xbe, 0x41, 0xdd,
	0x3b, 0xa6, 0xb8, 0x57, 0x9f, 0x20, 0x7d, 0xbc, 0x39, 0xbb, 0xbc, 0x79, 0x98, 0x0c, 0x5a, 0xa4,
	0x8b, 0xdb, 0xd3, 0xc9, 0xe3, 0x00, 0x5d, 0xdd, 0x7e, 0x96, 0x14, 0x7d, 0x95, 0x14, 0x7d, 0x97,
	0x14, 0xbd, 0xad, 0x68, 0xeb, 0x63, 0x45, 0xd1, 0xd3, 0xf9, 0xda, 0xaf, 0x55, 0xce, 0xbe, 0x84,
	0x51, 0xa3, 0xed, 0x37, 0x31, 0x0b, 0x2f, 0xd6, 0x21, 0xdc, 0xb2, 0x2a, 0xa7, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x96, 0xd0, 0x7a, 0x9e, 0x01, 0x00, 0x00,
}

func (m *ConstraintViolation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintViolation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintViolation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PathKind != 0 {
		i = encodeVarintValidation(dAtA, i, uint64(m.PathKind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConstraintViolation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.PathKind != 0 {
		n += 1 + sovValidation(uint64(m.PathKind))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidation(x uint64) (n int) {
	return sovValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConstraintViolation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintViolation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintViolation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathKind", wireType)
			}
			m.PathKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PathKind |= PathKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &types.Struct{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidation = fmt.Errorf("proto: unexpected end of group")
)
